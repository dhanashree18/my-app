{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","myStyle","setMyStyle","_useState3","_useState4","btnText","setBtnChange","react_default","a","createElement","Fragment","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","Navbar","props","concat","mode","href","title","aria-label","aria-current","toggleMode","htmlFor","toggleGrey","toggleBlue","TextForm","text","setText","heading","value","onChange","event","target","console","log","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","length","select","navigator","clipboard","writeText","split","join","defaultProps","Alerts","alert","role","msg","App","SetMode","setAlert","message","setTimeout","body","components_Alerts","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.af5b3de4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n    \r\n    const [myStyle, setMyStyle] = useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    })\r\n\r\n    const [btnText, setBtnChange] = useState('Enable Dark Mode');\r\n\r\n    const changeMode = () =>{\r\n        if(myStyle.color === 'black'){\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black'\r\n            })\r\n            setBtnChange(\"Enable Light Mode\")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnChange(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={myStyle}>\r\n        <h2 className=\"my-4\">About Us</h2>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n              <button\r\n                className=\"accordion-button\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\" style={myStyle}\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classes that we use to style each element. These classes control\r\n                the overall appearance, as well as the showing and hiding via\r\n                CSS transitions. You can modify any of this with custom CSS or\r\n                overriding our default variables. It's also worth noting that\r\n                just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\" style={myStyle}\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingTwo\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\" style={myStyle}\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingThree\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button type=\"button\" className=\"btn btn-dark mt-4\" onClick={changeMode}>{btnText}</button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//import {Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">\r\n                About\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n          <button className=\"greybtn ms-2\" onClick={props.toggleGrey}></button>\r\n          <button className=\"bluebtn ms-2\" onClick={props.toggleBlue}></button>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { \r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Site Title Here'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    \r\n    const handleUpClick = () =>{\r\n        console.log('Clicked');\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () =>{\r\n        console.log('Clicked');\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n\r\n    const handleCopyText = () =>{\r\n        var text = document.getElementById(\"textBox\");\r\n        if(text.value.length > 0) {\r\n            text.select();\r\n            navigator.clipboard.writeText(text.value);\r\n            props.showAlert(\"Text Copied\", \"success\");\r\n        }\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra space is removed\", \"success\");\r\n    }\r\n    \r\n    const handleClearClick = () =>{\r\n        let newText = ('');\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        setText(event.target.value)\r\n        console.log('On Change');\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container my-5\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h1 className=\"mb-4\">{props.heading}</h1>\r\n            <div className=\"mb-4\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"textBox\" rows=\"8\" style={{backgroundColor: props.mode === 'dark'?'#033156':'white', color: props.mode === 'dark'?'white':'black'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary me-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary me-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary me-2\" onClick={handleCopyText}>Copy Text</button>\r\n            <button className=\"btn btn-primary me-2\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n            <button className=\"btn btn-primary\" onClick={handleClearClick}>Clear Text</button>\r\n        </div>\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h1>Text Summary</h1>\r\n            <p>{text.split(' ').length} Words and {text.length} Characters.</p>\r\n            <p>{0.008 * text.split(' ').length} Minutes to read</p>\r\n            <h2>Text Preview</h2>\r\n            <p>{text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alerts(props) {\r\n  //const capitalize = (word) =>{\r\n    //const lower = word.toLowerCase();\r\n    //return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  //}\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}:</strong> {props.alert.msg}\r\n    </div>\r\n  )\r\n  }\r\n\r\nexport default Alerts","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react'\nimport Alerts from './components/Alerts';\n//import {BrowserRouter as Router, Route, Routes} from \"react-router-dom\"\n\nfunction App() {\n  const [mode, SetMode] = useState('light');\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(()=>{\n        setAlert(null)\n      },3000)\n  }\n\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      SetMode(\"dark\");\n      document.body.style.backgroundColor = '#033156';\n      showAlert(\"Dark Mode Enabled\",\"success\");\n      document.title = 'TextUtils - Dark Mode';\n      //setInterval(() => {\n       // document.title = 'TextUtils is Amazing Mode'\n      //},2000);\n      //setInterval(() => {\n        //document.title = 'Download TextUtils'\n      //},1500); \n    }\n    else{\n      SetMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode Enabled\",\"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  const toggleGrey = () =>{\n    if(mode === 'light'){\n      SetMode(\"dark\");\n      document.body.style.backgroundColor = '#7a7a7a';\n      showAlert(\"Dark Mode Enabled\",\"success\")\n    }\n    else{\n      SetMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode Enabled\",\"success\")\n    }\n  }\n  const toggleBlue = () =>{\n    if(mode === 'light'){\n      SetMode(\"dark\");\n      document.body.style.backgroundColor = '#000e69';\n      showAlert(\"Dark Mode Enabled\",\"success\");\n      document.title = 'TextUtils - DarkMode';\n    }\n    else{\n      SetMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode Enabled\",\"success\");\n      document.title = 'TextUtils - LightMode';\n    }\n  }\n\n  return (\n    <>\n     \n     \n      {/*<Navbar title=\"MyApp\" />*/}\n\n      <Navbar title=\"MyApp\" mode={mode} toggleMode={toggleMode} toggleGrey={toggleGrey} toggleBlue={toggleBlue} />\n\n      <Alerts alert={alert} />\n        \n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n          <About/>\n\n    </>\n  );\n}\n\nexport default App; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}